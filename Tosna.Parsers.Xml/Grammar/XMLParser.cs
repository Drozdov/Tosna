//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Projects/Tosna/Tosna.Parsers.Xml/Grammar\XMLParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class XMLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, EntityRef=2, CharRef=3, SEA_WS=4, OPEN=5, TEXT=6, CLOSE=7, 
		QUESTION=8, SLASH=9, EQUALS=10, STRING=11, Name=12, S=13;
	public const int
		RULE_document = 0, RULE_content = 1, RULE_element = 2, RULE_opening = 3, 
		RULE_closing = 4, RULE_reference = 5, RULE_attribute = 6, RULE_chardata = 7, 
		RULE_misc = 8;
	public static readonly string[] ruleNames = {
		"document", "content", "element", "opening", "closing", "reference", "attribute", 
		"chardata", "misc"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'>'", "'?'", "'/'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "EntityRef", "CharRef", "SEA_WS", "OPEN", "TEXT", "CLOSE", 
		"QUESTION", "SLASH", "EQUALS", "STRING", "Name", "S"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XMLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static XMLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public XMLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public XMLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(XMLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MiscContext[] misc() {
			return GetRuleContexts<MiscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MiscContext misc(int i) {
			return GetRuleContext<MiscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext[] content() {
			return GetRuleContexts<ContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content(int i) {
			return GetRuleContext<ContentContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT || _la==SEA_WS) {
				{
				{
				State = 18;
				misc();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPEN) {
				{
				{
				State = 24;
				element();
				State = 25;
				content();
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMENT || _la==SEA_WS) {
					{
					{
					State = 26;
					misc();
					}
					}
					State = 31;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChardataContext[] chardata() {
			return GetRuleContexts<ChardataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChardataContext chardata(int i) {
			return GetRuleContext<ChardataContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext[] reference() {
			return GetRuleContexts<ReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference(int i) {
			return GetRuleContext<ReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(XMLParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(XMLParser.COMMENT, i);
		}
		public ContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitContent(this);
		}
	}

	[RuleVersion(0)]
	public ContentContext content() {
		ContentContext _localctx = new ContentContext(Context, State);
		EnterRule(_localctx, 2, RULE_content);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 39;
				chardata();
				}
				break;
			}
			State = 51;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 44;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case EntityRef:
					case CharRef:
						{
						State = 42;
						reference();
						}
						break;
					case COMMENT:
						{
						State = 43;
						Match(COMMENT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 47;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						State = 46;
						chardata();
						}
						break;
					}
					}
					} 
				}
				State = 53;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(XMLParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpeningContext opening() {
			return GetRuleContext<OpeningContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosingContext closing() {
			return GetRuleContext<ClosingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(XMLParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(XMLParser.CLOSE, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(OPEN);
			State = 55;
			opening();
			State = 57;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 56;
				Match(Name);
				}
				break;
			}
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Name) {
				{
				{
				State = 59;
				attribute();
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 65;
			closing();
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLOSE) {
				{
				State = 66;
				Match(CLOSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpeningContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(XMLParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(XMLParser.QUESTION, 0); }
		public OpeningContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opening; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterOpening(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitOpening(this);
		}
	}

	[RuleVersion(0)]
	public OpeningContext opening() {
		OpeningContext _localctx = new OpeningContext(Context, State);
		EnterRule(_localctx, 6, RULE_opening);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 69;
				_la = TokenStream.LA(1);
				if ( !(_la==QUESTION || _la==SLASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(XMLParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(XMLParser.QUESTION, 0); }
		public ClosingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterClosing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitClosing(this);
		}
	}

	[RuleVersion(0)]
	public ClosingContext closing() {
		ClosingContext _localctx = new ClosingContext(Context, State);
		EnterRule(_localctx, 8, RULE_closing);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTION || _la==SLASH) {
				{
				State = 72;
				_la = TokenStream.LA(1);
				if ( !(_la==QUESTION || _la==SLASH) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EntityRef() { return GetToken(XMLParser.EntityRef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharRef() { return GetToken(XMLParser.CharRef, 0); }
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		ReferenceContext _localctx = new ReferenceContext(Context, State);
		EnterRule(_localctx, 10, RULE_reference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			_la = TokenStream.LA(1);
			if ( !(_la==EntityRef || _la==CharRef) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(XMLParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(XMLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(XMLParser.STRING, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(Name);
			State = 78;
			Match(EQUALS);
			State = 79;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChardataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(XMLParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEA_WS() { return GetToken(XMLParser.SEA_WS, 0); }
		public ChardataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chardata; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterChardata(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitChardata(this);
		}
	}

	[RuleVersion(0)]
	public ChardataContext chardata() {
		ChardataContext _localctx = new ChardataContext(Context, State);
		EnterRule(_localctx, 14, RULE_chardata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			_la = TokenStream.LA(1);
			if ( !(_la==SEA_WS || _la==TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MiscContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(XMLParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEA_WS() { return GetToken(XMLParser.SEA_WS, 0); }
		public MiscContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_misc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterMisc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitMisc(this);
		}
	}

	[RuleVersion(0)]
	public MiscContext misc() {
		MiscContext _localctx = new MiscContext(Context, State);
		EnterRule(_localctx, 16, RULE_misc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			_la = TokenStream.LA(1);
			if ( !(_la==COMMENT || _la==SEA_WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,13,86,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,1,0,5,0,20,8,0,10,0,12,0,23,9,0,1,0,1,0,1,0,5,0,28,8,0,10,
		0,12,0,31,9,0,5,0,33,8,0,10,0,12,0,36,9,0,1,0,1,0,1,1,3,1,41,8,1,1,1,1,
		1,3,1,45,8,1,1,1,3,1,48,8,1,5,1,50,8,1,10,1,12,1,53,9,1,1,2,1,2,1,2,3,
		2,58,8,2,1,2,5,2,61,8,2,10,2,12,2,64,9,2,1,2,1,2,3,2,68,8,2,1,3,3,3,71,
		8,3,1,4,3,4,74,8,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,0,0,9,0,
		2,4,6,8,10,12,14,16,0,4,1,0,8,9,1,0,2,3,2,0,4,4,6,6,2,0,1,1,4,4,88,0,21,
		1,0,0,0,2,40,1,0,0,0,4,54,1,0,0,0,6,70,1,0,0,0,8,73,1,0,0,0,10,75,1,0,
		0,0,12,77,1,0,0,0,14,81,1,0,0,0,16,83,1,0,0,0,18,20,3,16,8,0,19,18,1,0,
		0,0,20,23,1,0,0,0,21,19,1,0,0,0,21,22,1,0,0,0,22,34,1,0,0,0,23,21,1,0,
		0,0,24,25,3,4,2,0,25,29,3,2,1,0,26,28,3,16,8,0,27,26,1,0,0,0,28,31,1,0,
		0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,33,1,0,0,0,31,29,1,0,0,0,32,24,1,0,
		0,0,33,36,1,0,0,0,34,32,1,0,0,0,34,35,1,0,0,0,35,37,1,0,0,0,36,34,1,0,
		0,0,37,38,5,0,0,1,38,1,1,0,0,0,39,41,3,14,7,0,40,39,1,0,0,0,40,41,1,0,
		0,0,41,51,1,0,0,0,42,45,3,10,5,0,43,45,5,1,0,0,44,42,1,0,0,0,44,43,1,0,
		0,0,45,47,1,0,0,0,46,48,3,14,7,0,47,46,1,0,0,0,47,48,1,0,0,0,48,50,1,0,
		0,0,49,44,1,0,0,0,50,53,1,0,0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,3,1,0,0,
		0,53,51,1,0,0,0,54,55,5,5,0,0,55,57,3,6,3,0,56,58,5,12,0,0,57,56,1,0,0,
		0,57,58,1,0,0,0,58,62,1,0,0,0,59,61,3,12,6,0,60,59,1,0,0,0,61,64,1,0,0,
		0,62,60,1,0,0,0,62,63,1,0,0,0,63,65,1,0,0,0,64,62,1,0,0,0,65,67,3,8,4,
		0,66,68,5,7,0,0,67,66,1,0,0,0,67,68,1,0,0,0,68,5,1,0,0,0,69,71,7,0,0,0,
		70,69,1,0,0,0,70,71,1,0,0,0,71,7,1,0,0,0,72,74,7,0,0,0,73,72,1,0,0,0,73,
		74,1,0,0,0,74,9,1,0,0,0,75,76,7,1,0,0,76,11,1,0,0,0,77,78,5,12,0,0,78,
		79,5,10,0,0,79,80,5,11,0,0,80,13,1,0,0,0,81,82,7,2,0,0,82,15,1,0,0,0,83,
		84,7,3,0,0,84,17,1,0,0,0,12,21,29,34,40,44,47,51,57,62,67,70,73
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Grammar
