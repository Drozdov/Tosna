//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Projects/Tosna/Tosna.Parsers.Xml/Grammar\XMLParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class XMLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, CDATA=2, DTD=3, EntityRef=4, CharRef=5, SEA_WS=6, OPEN=7, XMLDeclOpen=8, 
		TEXT=9, CLOSE=10, SPECIAL_CLOSE=11, SLASH_CLOSE=12, SLASH=13, EQUALS=14, 
		STRING=15, Name=16, S=17, PI=18;
	public const int
		RULE_document = 0, RULE_prolog = 1, RULE_content = 2, RULE_element = 3, 
		RULE_validElement = 4, RULE_invalidElement = 5, RULE_reference = 6, RULE_attribute = 7, 
		RULE_chardata = 8, RULE_misc = 9;
	public static readonly string[] ruleNames = {
		"document", "prolog", "content", "element", "validElement", "invalidElement", 
		"reference", "attribute", "chardata", "misc"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "'>'", null, 
		"'/>'", "'/'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "CDATA", "DTD", "EntityRef", "CharRef", "SEA_WS", "OPEN", 
		"XMLDeclOpen", "TEXT", "CLOSE", "SPECIAL_CLOSE", "SLASH_CLOSE", "SLASH", 
		"EQUALS", "STRING", "Name", "S", "PI"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XMLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static XMLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public XMLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public XMLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(XMLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrologContext prolog() {
			return GetRuleContext<PrologContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MiscContext[] misc() {
			return GetRuleContexts<MiscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MiscContext misc(int i) {
			return GetRuleContext<MiscContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==XMLDeclOpen) {
				{
				State = 20;
				prolog();
				}
			}

			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 262210L) != 0) {
				{
				{
				State = 23;
				misc();
				}
				}
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 29;
			element();
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 262210L) != 0) {
				{
				{
				State = 30;
				misc();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 36;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrologContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLDeclOpen() { return GetToken(XMLParser.XMLDeclOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIAL_CLOSE() { return GetToken(XMLParser.SPECIAL_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public PrologContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prolog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterProlog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitProlog(this);
		}
	}

	[RuleVersion(0)]
	public PrologContext prolog() {
		PrologContext _localctx = new PrologContext(Context, State);
		EnterRule(_localctx, 2, RULE_prolog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(XMLDeclOpen);
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Name) {
				{
				{
				State = 39;
				attribute();
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 45;
			Match(SPECIAL_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChardataContext[] chardata() {
			return GetRuleContexts<ChardataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChardataContext chardata(int i) {
			return GetRuleContext<ChardataContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext[] reference() {
			return GetRuleContexts<ReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference(int i) {
			return GetRuleContext<ReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CDATA() { return GetTokens(XMLParser.CDATA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CDATA(int i) {
			return GetToken(XMLParser.CDATA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PI() { return GetTokens(XMLParser.PI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI(int i) {
			return GetToken(XMLParser.PI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(XMLParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(XMLParser.COMMENT, i);
		}
		public ContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitContent(this);
		}
	}

	[RuleVersion(0)]
	public ContentContext content() {
		ContentContext _localctx = new ContentContext(Context, State);
		EnterRule(_localctx, 4, RULE_content);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 47;
				chardata();
				}
				break;
			}
			State = 62;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 55;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OPEN:
						{
						State = 50;
						element();
						}
						break;
					case EntityRef:
					case CharRef:
						{
						State = 51;
						reference();
						}
						break;
					case CDATA:
						{
						State = 52;
						Match(CDATA);
						}
						break;
					case PI:
						{
						State = 53;
						Match(PI);
						}
						break;
					case COMMENT:
						{
						State = 54;
						Match(COMMENT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 58;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 57;
						chardata();
						}
						break;
					}
					}
					} 
				}
				State = 64;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidElementContext validElement() {
			return GetRuleContext<ValidElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvalidElementContext invalidElement() {
			return GetRuleContext<InvalidElementContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 6, RULE_element);
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				validElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				invalidElement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN() { return GetTokens(XMLParser.OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN(int i) {
			return GetToken(XMLParser.OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Name() { return GetTokens(XMLParser.Name); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name(int i) {
			return GetToken(XMLParser.Name, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE() { return GetTokens(XMLParser.CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE(int i) {
			return GetToken(XMLParser.CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(XMLParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH_CLOSE() { return GetToken(XMLParser.SLASH_CLOSE, 0); }
		public ValidElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterValidElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitValidElement(this);
		}
	}

	[RuleVersion(0)]
	public ValidElementContext validElement() {
		ValidElementContext _localctx = new ValidElementContext(Context, State);
		EnterRule(_localctx, 8, RULE_validElement);
		int _la;
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69;
				Match(OPEN);
				State = 70;
				Match(Name);
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Name) {
					{
					{
					State = 71;
					attribute();
					}
					}
					State = 76;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 77;
				Match(CLOSE);
				State = 78;
				content();
				State = 79;
				Match(OPEN);
				State = 80;
				Match(SLASH);
				State = 81;
				Match(Name);
				State = 82;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				Match(OPEN);
				State = 85;
				Match(Name);
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Name) {
					{
					{
					State = 86;
					attribute();
					}
					}
					State = 91;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 92;
				Match(SLASH_CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvalidElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN() { return GetTokens(XMLParser.OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN(int i) {
			return GetToken(XMLParser.OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Name() { return GetTokens(XMLParser.Name); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name(int i) {
			return GetToken(XMLParser.Name, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(XMLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(XMLParser.SLASH, 0); }
		public InvalidElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invalidElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterInvalidElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitInvalidElement(this);
		}
	}

	[RuleVersion(0)]
	public InvalidElementContext invalidElement() {
		InvalidElementContext _localctx = new InvalidElementContext(Context, State);
		EnterRule(_localctx, 10, RULE_invalidElement);
		int _la;
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				Match(OPEN);
				State = 96;
				Match(Name);
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Name) {
					{
					{
					State = 97;
					attribute();
					}
					}
					State = 102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 103;
				Match(CLOSE);
				State = 104;
				content();
				State = 112;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 105;
					Match(OPEN);
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SLASH) {
						{
						State = 106;
						Match(SLASH);
						State = 108;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Name) {
							{
							State = 107;
							Match(Name);
							}
						}

						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				Match(OPEN);
				State = 115;
				Match(Name);
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Name) {
					{
					{
					State = 116;
					attribute();
					}
					}
					State = 121;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SLASH) {
					{
					State = 122;
					Match(SLASH);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EntityRef() { return GetToken(XMLParser.EntityRef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharRef() { return GetToken(XMLParser.CharRef, 0); }
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		ReferenceContext _localctx = new ReferenceContext(Context, State);
		EnterRule(_localctx, 12, RULE_reference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			_la = TokenStream.LA(1);
			if ( !(_la==EntityRef || _la==CharRef) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(XMLParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(XMLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(XMLParser.STRING, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 14, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(Name);
			State = 130;
			Match(EQUALS);
			State = 131;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChardataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(XMLParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEA_WS() { return GetToken(XMLParser.SEA_WS, 0); }
		public ChardataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chardata; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterChardata(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitChardata(this);
		}
	}

	[RuleVersion(0)]
	public ChardataContext chardata() {
		ChardataContext _localctx = new ChardataContext(Context, State);
		EnterRule(_localctx, 16, RULE_chardata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			_la = TokenStream.LA(1);
			if ( !(_la==SEA_WS || _la==TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MiscContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(XMLParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI() { return GetToken(XMLParser.PI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEA_WS() { return GetToken(XMLParser.SEA_WS, 0); }
		public MiscContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_misc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterMisc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitMisc(this);
		}
	}

	[RuleVersion(0)]
	public MiscContext misc() {
		MiscContext _localctx = new MiscContext(Context, State);
		EnterRule(_localctx, 18, RULE_misc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 262210L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,18,138,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,1,0,3,0,22,8,0,1,0,5,0,25,8,0,10,0,12,0,28,9,0,1,0,
		1,0,5,0,32,8,0,10,0,12,0,35,9,0,1,0,1,0,1,1,1,1,5,1,41,8,1,10,1,12,1,44,
		9,1,1,1,1,1,1,2,3,2,49,8,2,1,2,1,2,1,2,1,2,1,2,3,2,56,8,2,1,2,3,2,59,8,
		2,5,2,61,8,2,10,2,12,2,64,9,2,1,3,1,3,3,3,68,8,3,1,4,1,4,1,4,5,4,73,8,
		4,10,4,12,4,76,9,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,88,8,4,
		10,4,12,4,91,9,4,1,4,3,4,94,8,4,1,5,1,5,1,5,5,5,99,8,5,10,5,12,5,102,9,
		5,1,5,1,5,1,5,1,5,1,5,3,5,109,8,5,3,5,111,8,5,3,5,113,8,5,1,5,1,5,1,5,
		5,5,118,8,5,10,5,12,5,121,9,5,1,5,3,5,124,8,5,3,5,126,8,5,1,6,1,6,1,7,
		1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,0,0,10,0,2,4,6,8,10,12,14,16,18,0,3,1,
		0,4,5,2,0,6,6,9,9,3,0,1,1,6,6,18,18,149,0,21,1,0,0,0,2,38,1,0,0,0,4,48,
		1,0,0,0,6,67,1,0,0,0,8,93,1,0,0,0,10,125,1,0,0,0,12,127,1,0,0,0,14,129,
		1,0,0,0,16,133,1,0,0,0,18,135,1,0,0,0,20,22,3,2,1,0,21,20,1,0,0,0,21,22,
		1,0,0,0,22,26,1,0,0,0,23,25,3,18,9,0,24,23,1,0,0,0,25,28,1,0,0,0,26,24,
		1,0,0,0,26,27,1,0,0,0,27,29,1,0,0,0,28,26,1,0,0,0,29,33,3,6,3,0,30,32,
		3,18,9,0,31,30,1,0,0,0,32,35,1,0,0,0,33,31,1,0,0,0,33,34,1,0,0,0,34,36,
		1,0,0,0,35,33,1,0,0,0,36,37,5,0,0,1,37,1,1,0,0,0,38,42,5,8,0,0,39,41,3,
		14,7,0,40,39,1,0,0,0,41,44,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,45,1,
		0,0,0,44,42,1,0,0,0,45,46,5,11,0,0,46,3,1,0,0,0,47,49,3,16,8,0,48,47,1,
		0,0,0,48,49,1,0,0,0,49,62,1,0,0,0,50,56,3,6,3,0,51,56,3,12,6,0,52,56,5,
		2,0,0,53,56,5,18,0,0,54,56,5,1,0,0,55,50,1,0,0,0,55,51,1,0,0,0,55,52,1,
		0,0,0,55,53,1,0,0,0,55,54,1,0,0,0,56,58,1,0,0,0,57,59,3,16,8,0,58,57,1,
		0,0,0,58,59,1,0,0,0,59,61,1,0,0,0,60,55,1,0,0,0,61,64,1,0,0,0,62,60,1,
		0,0,0,62,63,1,0,0,0,63,5,1,0,0,0,64,62,1,0,0,0,65,68,3,8,4,0,66,68,3,10,
		5,0,67,65,1,0,0,0,67,66,1,0,0,0,68,7,1,0,0,0,69,70,5,7,0,0,70,74,5,16,
		0,0,71,73,3,14,7,0,72,71,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,74,75,1,0,
		0,0,75,77,1,0,0,0,76,74,1,0,0,0,77,78,5,10,0,0,78,79,3,4,2,0,79,80,5,7,
		0,0,80,81,5,13,0,0,81,82,5,16,0,0,82,83,5,10,0,0,83,94,1,0,0,0,84,85,5,
		7,0,0,85,89,5,16,0,0,86,88,3,14,7,0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,
		1,0,0,0,89,90,1,0,0,0,90,92,1,0,0,0,91,89,1,0,0,0,92,94,5,12,0,0,93,69,
		1,0,0,0,93,84,1,0,0,0,94,9,1,0,0,0,95,96,5,7,0,0,96,100,5,16,0,0,97,99,
		3,14,7,0,98,97,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,
		103,1,0,0,0,102,100,1,0,0,0,103,104,5,10,0,0,104,112,3,4,2,0,105,110,5,
		7,0,0,106,108,5,13,0,0,107,109,5,16,0,0,108,107,1,0,0,0,108,109,1,0,0,
		0,109,111,1,0,0,0,110,106,1,0,0,0,110,111,1,0,0,0,111,113,1,0,0,0,112,
		105,1,0,0,0,112,113,1,0,0,0,113,126,1,0,0,0,114,115,5,7,0,0,115,119,5,
		16,0,0,116,118,3,14,7,0,117,116,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,
		0,119,120,1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,122,124,5,13,0,0,123,
		122,1,0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,95,1,0,0,0,125,114,1,0,
		0,0,126,11,1,0,0,0,127,128,7,0,0,0,128,13,1,0,0,0,129,130,5,16,0,0,130,
		131,5,14,0,0,131,132,5,15,0,0,132,15,1,0,0,0,133,134,7,1,0,0,134,17,1,
		0,0,0,135,136,7,2,0,0,136,19,1,0,0,0,19,21,26,33,42,48,55,58,62,67,74,
		89,93,100,108,110,112,119,123,125
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Grammar
