//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Projects/Tosna/Tosna.Parsers.Xml/Grammar\XMLLexer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class XMLLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, EntityRef=2, CharRef=3, SEA_WS=4, OPEN=5, TEXT=6, CLOSE=7, 
		QUESTION=8, SLASH=9, EQUALS=10, STRING=11, Name=12, S=13;
	public const int
		INSIDE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "INSIDE"
	};

	public static readonly string[] ruleNames = {
		"COMMENT", "EntityRef", "CharRef", "SEA_WS", "OPEN", "TEXT", "CLOSE", 
		"QUESTION", "SLASH", "EQUALS", "STRING", "Name", "S", "InvalidOpen", "HEXDIGIT", 
		"DIGIT", "NameChar", "NameStartChar"
	};


	public XMLLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public XMLLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'>'", "'?'", "'/'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "EntityRef", "CharRef", "SEA_WS", "OPEN", "TEXT", "CLOSE", 
		"QUESTION", "SLASH", "EQUALS", "STRING", "Name", "S"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XMLLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static XMLLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,13,154,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,1,0,1,0,5,0,45,
		8,0,10,0,12,0,48,9,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,4,
		2,62,8,2,11,2,12,2,63,1,2,1,2,1,2,1,2,1,2,1,2,1,2,4,2,73,8,2,11,2,12,2,
		74,1,2,1,2,3,2,79,8,2,1,3,1,3,3,3,83,8,3,1,3,4,3,86,8,3,11,3,12,3,87,1,
		4,1,4,1,4,1,4,1,5,4,5,95,8,5,11,5,12,5,96,1,6,1,6,1,6,1,6,1,7,1,7,1,8,
		1,8,1,9,1,9,1,10,1,10,5,10,111,8,10,10,10,12,10,114,9,10,1,10,1,10,1,10,
		5,10,119,8,10,10,10,12,10,122,9,10,1,10,3,10,125,8,10,1,11,1,11,5,11,129,
		8,11,10,11,12,11,132,9,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,
		1,14,1,15,1,15,1,16,1,16,1,16,1,16,3,16,150,8,16,1,17,3,17,153,8,17,1,
		46,0,18,2,1,4,2,6,3,8,4,10,5,12,6,14,7,16,8,18,9,20,10,22,11,24,12,26,
		13,28,0,30,0,32,0,34,0,36,0,2,0,1,10,2,0,9,9,32,32,2,0,38,38,60,60,2,0,
		34,34,60,60,2,0,39,39,60,60,3,0,9,10,13,13,32,32,3,0,48,57,65,70,97,102,
		1,0,48,57,2,0,45,46,95,95,3,0,183,183,768,879,8255,8256,8,0,58,58,65,90,
		97,122,8304,8591,11264,12271,12289,55295,63744,64975,65008,65533,163,0,
		2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,
		0,1,14,1,0,0,0,1,16,1,0,0,0,1,18,1,0,0,0,1,20,1,0,0,0,1,22,1,0,0,0,1,24,
		1,0,0,0,1,26,1,0,0,0,1,28,1,0,0,0,2,38,1,0,0,0,4,53,1,0,0,0,6,78,1,0,0,
		0,8,85,1,0,0,0,10,89,1,0,0,0,12,94,1,0,0,0,14,98,1,0,0,0,16,102,1,0,0,
		0,18,104,1,0,0,0,20,106,1,0,0,0,22,124,1,0,0,0,24,126,1,0,0,0,26,133,1,
		0,0,0,28,137,1,0,0,0,30,141,1,0,0,0,32,143,1,0,0,0,34,149,1,0,0,0,36,152,
		1,0,0,0,38,39,5,60,0,0,39,40,5,33,0,0,40,41,5,45,0,0,41,42,5,45,0,0,42,
		46,1,0,0,0,43,45,9,0,0,0,44,43,1,0,0,0,45,48,1,0,0,0,46,47,1,0,0,0,46,
		44,1,0,0,0,47,49,1,0,0,0,48,46,1,0,0,0,49,50,5,45,0,0,50,51,5,45,0,0,51,
		52,5,62,0,0,52,3,1,0,0,0,53,54,5,38,0,0,54,55,3,24,11,0,55,56,5,59,0,0,
		56,5,1,0,0,0,57,58,5,38,0,0,58,59,5,35,0,0,59,61,1,0,0,0,60,62,3,32,15,
		0,61,60,1,0,0,0,62,63,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,65,1,0,0,
		0,65,66,5,59,0,0,66,79,1,0,0,0,67,68,5,38,0,0,68,69,5,35,0,0,69,70,5,120,
		0,0,70,72,1,0,0,0,71,73,3,30,14,0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,1,
		0,0,0,74,75,1,0,0,0,75,76,1,0,0,0,76,77,5,59,0,0,77,79,1,0,0,0,78,57,1,
		0,0,0,78,67,1,0,0,0,79,7,1,0,0,0,80,86,7,0,0,0,81,83,5,13,0,0,82,81,1,
		0,0,0,82,83,1,0,0,0,83,84,1,0,0,0,84,86,5,10,0,0,85,80,1,0,0,0,85,82,1,
		0,0,0,86,87,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,9,1,0,0,0,89,90,5,60,
		0,0,90,91,1,0,0,0,91,92,6,4,0,0,92,11,1,0,0,0,93,95,8,1,0,0,94,93,1,0,
		0,0,95,96,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,13,1,0,0,0,98,99,5,62,
		0,0,99,100,1,0,0,0,100,101,6,6,1,0,101,15,1,0,0,0,102,103,5,63,0,0,103,
		17,1,0,0,0,104,105,5,47,0,0,105,19,1,0,0,0,106,107,5,61,0,0,107,21,1,0,
		0,0,108,112,5,34,0,0,109,111,8,2,0,0,110,109,1,0,0,0,111,114,1,0,0,0,112,
		110,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,112,1,0,0,0,115,125,5,
		34,0,0,116,120,5,39,0,0,117,119,8,3,0,0,118,117,1,0,0,0,119,122,1,0,0,
		0,120,118,1,0,0,0,120,121,1,0,0,0,121,123,1,0,0,0,122,120,1,0,0,0,123,
		125,5,39,0,0,124,108,1,0,0,0,124,116,1,0,0,0,125,23,1,0,0,0,126,130,3,
		36,17,0,127,129,3,34,16,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,1,0,
		0,0,130,131,1,0,0,0,131,25,1,0,0,0,132,130,1,0,0,0,133,134,7,4,0,0,134,
		135,1,0,0,0,135,136,6,12,2,0,136,27,1,0,0,0,137,138,5,60,0,0,138,139,1,
		0,0,0,139,140,6,13,3,0,140,29,1,0,0,0,141,142,7,5,0,0,142,31,1,0,0,0,143,
		144,7,6,0,0,144,33,1,0,0,0,145,150,3,36,17,0,146,150,7,7,0,0,147,150,3,
		32,15,0,148,150,7,8,0,0,149,145,1,0,0,0,149,146,1,0,0,0,149,147,1,0,0,
		0,149,148,1,0,0,0,150,35,1,0,0,0,151,153,7,9,0,0,152,151,1,0,0,0,153,37,
		1,0,0,0,16,0,1,46,63,74,78,82,85,87,96,112,120,124,130,149,152,4,5,1,0,
		4,0,0,6,0,0,7,5,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Grammar
