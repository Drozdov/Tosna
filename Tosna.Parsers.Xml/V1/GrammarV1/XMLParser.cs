//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Projects/Tosna/Tosna.Parsers.Xml/V1/GrammarV1\XMLParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GrammarV1 {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
//[System.CLSCompliant(false)]
public partial class XMLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, CDATA=2, DTD=3, EntityRef=4, CharRef=5, SEA_WS=6, OPEN=7, XMLDeclOpen=8, 
		TEXT=9, CLOSE=10, SPECIAL_CLOSE=11, SLASH_CLOSE=12, SLASH=13, EQUALS=14, 
		STRING=15, Name=16, S=17, PI=18;
	public const int
		RULE_document = 0, RULE_prolog = 1, RULE_content = 2, RULE_element = 3, 
		RULE_duplicateElement = 4, RULE_validElement = 5, RULE_invalidElement = 6, 
		RULE_validOpen = 7, RULE_validClose = 8, RULE_validOpenShort = 9, RULE_invalidOpen = 10, 
		RULE_invalidClose = 11, RULE_reference = 12, RULE_attribute = 13, RULE_chardata = 14, 
		RULE_misc = 15;
	public static readonly string[] ruleNames = {
		"document", "prolog", "content", "element", "duplicateElement", "validElement", 
		"invalidElement", "validOpen", "validClose", "validOpenShort", "invalidOpen", 
		"invalidClose", "reference", "attribute", "chardata", "misc"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "'>'", null, 
		"'/>'", "'/'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "CDATA", "DTD", "EntityRef", "CharRef", "SEA_WS", "OPEN", 
		"XMLDeclOpen", "TEXT", "CLOSE", "SPECIAL_CLOSE", "SLASH_CLOSE", "SLASH", 
		"EQUALS", "STRING", "Name", "S", "PI"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XMLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static XMLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public XMLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public XMLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(XMLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrologContext prolog() {
			return GetRuleContext<PrologContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MiscContext[] misc() {
			return GetRuleContexts<MiscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MiscContext misc(int i) {
			return GetRuleContext<MiscContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DuplicateElementContext[] duplicateElement() {
			return GetRuleContexts<DuplicateElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DuplicateElementContext duplicateElement(int i) {
			return GetRuleContext<DuplicateElementContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==XMLDeclOpen) {
				{
				State = 32;
				prolog();
				}
			}

			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 262210L) != 0) {
				{
				{
				State = 35;
				misc();
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 41;
			element();
			State = 47;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 42;
					misc();
					State = 43;
					duplicateElement();
					}
					} 
				}
				State = 49;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 262210L) != 0) {
				{
				{
				State = 50;
				misc();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 56;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrologContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLDeclOpen() { return GetToken(XMLParser.XMLDeclOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIAL_CLOSE() { return GetToken(XMLParser.SPECIAL_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public PrologContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prolog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterProlog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitProlog(this);
		}
	}

	[RuleVersion(0)]
	public PrologContext prolog() {
		PrologContext _localctx = new PrologContext(Context, State);
		EnterRule(_localctx, 2, RULE_prolog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(XMLDeclOpen);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Name) {
				{
				{
				State = 59;
				attribute();
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 65;
			Match(SPECIAL_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChardataContext[] chardata() {
			return GetRuleContexts<ChardataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChardataContext chardata(int i) {
			return GetRuleContext<ChardataContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext[] reference() {
			return GetRuleContexts<ReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference(int i) {
			return GetRuleContext<ReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CDATA() { return GetTokens(XMLParser.CDATA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CDATA(int i) {
			return GetToken(XMLParser.CDATA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PI() { return GetTokens(XMLParser.PI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI(int i) {
			return GetToken(XMLParser.PI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(XMLParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(XMLParser.COMMENT, i);
		}
		public ContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitContent(this);
		}
	}

	[RuleVersion(0)]
	public ContentContext content() {
		ContentContext _localctx = new ContentContext(Context, State);
		EnterRule(_localctx, 4, RULE_content);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 67;
				chardata();
				}
				break;
			}
			State = 82;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 75;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OPEN:
						{
						State = 70;
						element();
						}
						break;
					case EntityRef:
					case CharRef:
						{
						State = 71;
						reference();
						}
						break;
					case CDATA:
						{
						State = 72;
						Match(CDATA);
						}
						break;
					case PI:
						{
						State = 73;
						Match(PI);
						}
						break;
					case COMMENT:
						{
						State = 74;
						Match(COMMENT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 78;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						State = 77;
						chardata();
						}
						break;
					}
					}
					} 
				}
				State = 84;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidElementContext validElement() {
			return GetRuleContext<ValidElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvalidElementContext invalidElement() {
			return GetRuleContext<InvalidElementContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 6, RULE_element);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				validElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				invalidElement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DuplicateElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public DuplicateElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duplicateElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterDuplicateElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitDuplicateElement(this);
		}
	}

	[RuleVersion(0)]
	public DuplicateElementContext duplicateElement() {
		DuplicateElementContext _localctx = new DuplicateElementContext(Context, State);
		EnterRule(_localctx, 8, RULE_duplicateElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidOpenContext validOpen() {
			return GetRuleContext<ValidOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValidCloseContext validClose() {
			return GetRuleContext<ValidCloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValidOpenShortContext validOpenShort() {
			return GetRuleContext<ValidOpenShortContext>(0);
		}
		public ValidElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterValidElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitValidElement(this);
		}
	}

	[RuleVersion(0)]
	public ValidElementContext validElement() {
		ValidElementContext _localctx = new ValidElementContext(Context, State);
		EnterRule(_localctx, 10, RULE_validElement);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91;
				validOpen();
				State = 92;
				content();
				State = 93;
				validClose();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95;
				validOpenShort();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvalidElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValidOpenContext validOpen() {
			return GetRuleContext<ValidOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContentContext content() {
			return GetRuleContext<ContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvalidCloseContext invalidClose() {
			return GetRuleContext<InvalidCloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvalidOpenContext invalidOpen() {
			return GetRuleContext<InvalidOpenContext>(0);
		}
		public InvalidElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invalidElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterInvalidElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitInvalidElement(this);
		}
	}

	[RuleVersion(0)]
	public InvalidElementContext invalidElement() {
		InvalidElementContext _localctx = new InvalidElementContext(Context, State);
		EnterRule(_localctx, 12, RULE_invalidElement);
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				validOpen();
				State = 99;
				content();
				State = 100;
				invalidClose();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				invalidOpen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidOpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(XMLParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(XMLParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(XMLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ValidOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validOpen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterValidOpen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitValidOpen(this);
		}
	}

	[RuleVersion(0)]
	public ValidOpenContext validOpen() {
		ValidOpenContext _localctx = new ValidOpenContext(Context, State);
		EnterRule(_localctx, 14, RULE_validOpen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(OPEN);
			State = 106;
			Match(Name);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Name) {
				{
				{
				State = 107;
				attribute();
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 113;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidCloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(XMLParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(XMLParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(XMLParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(XMLParser.CLOSE, 0); }
		public ValidCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validClose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterValidClose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitValidClose(this);
		}
	}

	[RuleVersion(0)]
	public ValidCloseContext validClose() {
		ValidCloseContext _localctx = new ValidCloseContext(Context, State);
		EnterRule(_localctx, 16, RULE_validClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(OPEN);
			State = 116;
			Match(SLASH);
			State = 117;
			Match(Name);
			State = 118;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidOpenShortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(XMLParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(XMLParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH_CLOSE() { return GetToken(XMLParser.SLASH_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ValidOpenShortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validOpenShort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterValidOpenShort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitValidOpenShort(this);
		}
	}

	[RuleVersion(0)]
	public ValidOpenShortContext validOpenShort() {
		ValidOpenShortContext _localctx = new ValidOpenShortContext(Context, State);
		EnterRule(_localctx, 18, RULE_validOpenShort);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(OPEN);
			State = 121;
			Match(Name);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Name) {
				{
				{
				State = 122;
				attribute();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 128;
			Match(SLASH_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvalidOpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(XMLParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(XMLParser.Name, 0); }
		public InvalidOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invalidOpen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterInvalidOpen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitInvalidOpen(this);
		}
	}

	[RuleVersion(0)]
	public InvalidOpenContext invalidOpen() {
		InvalidOpenContext _localctx = new InvalidOpenContext(Context, State);
		EnterRule(_localctx, 20, RULE_invalidOpen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(OPEN);
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Name) {
				{
				State = 131;
				Match(Name);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvalidCloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(XMLParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(XMLParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(XMLParser.Name, 0); }
		public InvalidCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invalidClose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterInvalidClose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitInvalidClose(this);
		}
	}

	[RuleVersion(0)]
	public InvalidCloseContext invalidClose() {
		InvalidCloseContext _localctx = new InvalidCloseContext(Context, State);
		EnterRule(_localctx, 22, RULE_invalidClose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 134;
				Match(OPEN);
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SLASH) {
					{
					State = 135;
					Match(SLASH);
					State = 137;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Name) {
						{
						State = 136;
						Match(Name);
						}
					}

					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EntityRef() { return GetToken(XMLParser.EntityRef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharRef() { return GetToken(XMLParser.CharRef, 0); }
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		ReferenceContext _localctx = new ReferenceContext(Context, State);
		EnterRule(_localctx, 24, RULE_reference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			_la = TokenStream.LA(1);
			if ( !(_la==EntityRef || _la==CharRef) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(XMLParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(XMLParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(XMLParser.STRING, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 26, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(Name);
			State = 146;
			Match(EQUALS);
			State = 147;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChardataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(XMLParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEA_WS() { return GetToken(XMLParser.SEA_WS, 0); }
		public ChardataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chardata; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterChardata(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitChardata(this);
		}
	}

	[RuleVersion(0)]
	public ChardataContext chardata() {
		ChardataContext _localctx = new ChardataContext(Context, State);
		EnterRule(_localctx, 28, RULE_chardata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			_la = TokenStream.LA(1);
			if ( !(_la==SEA_WS || _la==TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MiscContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(XMLParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI() { return GetToken(XMLParser.PI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEA_WS() { return GetToken(XMLParser.SEA_WS, 0); }
		public MiscContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_misc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.EnterMisc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXMLParserListener typedListener = listener as IXMLParserListener;
			if (typedListener != null) typedListener.ExitMisc(this);
		}
	}

	[RuleVersion(0)]
	public MiscContext misc() {
		MiscContext _localctx = new MiscContext(Context, State);
		EnterRule(_localctx, 30, RULE_misc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 262210L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,18,154,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,3,0,34,8,0,1,0,5,0,37,8,0,10,0,12,0,40,9,0,1,0,1,0,1,0,1,
		0,5,0,46,8,0,10,0,12,0,49,9,0,1,0,5,0,52,8,0,10,0,12,0,55,9,0,1,0,1,0,
		1,1,1,1,5,1,61,8,1,10,1,12,1,64,9,1,1,1,1,1,1,2,3,2,69,8,2,1,2,1,2,1,2,
		1,2,1,2,3,2,76,8,2,1,2,3,2,79,8,2,5,2,81,8,2,10,2,12,2,84,9,2,1,3,1,3,
		3,3,88,8,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,3,5,97,8,5,1,6,1,6,1,6,1,6,1,6,
		3,6,104,8,6,1,7,1,7,1,7,5,7,109,8,7,10,7,12,7,112,9,7,1,7,1,7,1,8,1,8,
		1,8,1,8,1,8,1,9,1,9,1,9,5,9,124,8,9,10,9,12,9,127,9,9,1,9,1,9,1,10,1,10,
		3,10,133,8,10,1,11,1,11,1,11,3,11,138,8,11,3,11,140,8,11,3,11,142,8,11,
		1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,0,0,16,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,0,3,1,0,4,5,2,0,6,6,9,9,3,0,1,1,6,6,
		18,18,158,0,33,1,0,0,0,2,58,1,0,0,0,4,68,1,0,0,0,6,87,1,0,0,0,8,89,1,0,
		0,0,10,96,1,0,0,0,12,103,1,0,0,0,14,105,1,0,0,0,16,115,1,0,0,0,18,120,
		1,0,0,0,20,130,1,0,0,0,22,141,1,0,0,0,24,143,1,0,0,0,26,145,1,0,0,0,28,
		149,1,0,0,0,30,151,1,0,0,0,32,34,3,2,1,0,33,32,1,0,0,0,33,34,1,0,0,0,34,
		38,1,0,0,0,35,37,3,30,15,0,36,35,1,0,0,0,37,40,1,0,0,0,38,36,1,0,0,0,38,
		39,1,0,0,0,39,41,1,0,0,0,40,38,1,0,0,0,41,47,3,6,3,0,42,43,3,30,15,0,43,
		44,3,8,4,0,44,46,1,0,0,0,45,42,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,47,
		48,1,0,0,0,48,53,1,0,0,0,49,47,1,0,0,0,50,52,3,30,15,0,51,50,1,0,0,0,52,
		55,1,0,0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,56,1,0,0,0,55,53,1,0,0,0,56,
		57,5,0,0,1,57,1,1,0,0,0,58,62,5,8,0,0,59,61,3,26,13,0,60,59,1,0,0,0,61,
		64,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,65,1,0,0,0,64,62,1,0,0,0,65,
		66,5,11,0,0,66,3,1,0,0,0,67,69,3,28,14,0,68,67,1,0,0,0,68,69,1,0,0,0,69,
		82,1,0,0,0,70,76,3,6,3,0,71,76,3,24,12,0,72,76,5,2,0,0,73,76,5,18,0,0,
		74,76,5,1,0,0,75,70,1,0,0,0,75,71,1,0,0,0,75,72,1,0,0,0,75,73,1,0,0,0,
		75,74,1,0,0,0,76,78,1,0,0,0,77,79,3,28,14,0,78,77,1,0,0,0,78,79,1,0,0,
		0,79,81,1,0,0,0,80,75,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,
		0,83,5,1,0,0,0,84,82,1,0,0,0,85,88,3,10,5,0,86,88,3,12,6,0,87,85,1,0,0,
		0,87,86,1,0,0,0,88,7,1,0,0,0,89,90,3,6,3,0,90,9,1,0,0,0,91,92,3,14,7,0,
		92,93,3,4,2,0,93,94,3,16,8,0,94,97,1,0,0,0,95,97,3,18,9,0,96,91,1,0,0,
		0,96,95,1,0,0,0,97,11,1,0,0,0,98,99,3,14,7,0,99,100,3,4,2,0,100,101,3,
		22,11,0,101,104,1,0,0,0,102,104,3,20,10,0,103,98,1,0,0,0,103,102,1,0,0,
		0,104,13,1,0,0,0,105,106,5,7,0,0,106,110,5,16,0,0,107,109,3,26,13,0,108,
		107,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,113,1,
		0,0,0,112,110,1,0,0,0,113,114,5,10,0,0,114,15,1,0,0,0,115,116,5,7,0,0,
		116,117,5,13,0,0,117,118,5,16,0,0,118,119,5,10,0,0,119,17,1,0,0,0,120,
		121,5,7,0,0,121,125,5,16,0,0,122,124,3,26,13,0,123,122,1,0,0,0,124,127,
		1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,128,1,0,0,0,127,125,1,0,0,
		0,128,129,5,12,0,0,129,19,1,0,0,0,130,132,5,7,0,0,131,133,5,16,0,0,132,
		131,1,0,0,0,132,133,1,0,0,0,133,21,1,0,0,0,134,139,5,7,0,0,135,137,5,13,
		0,0,136,138,5,16,0,0,137,136,1,0,0,0,137,138,1,0,0,0,138,140,1,0,0,0,139,
		135,1,0,0,0,139,140,1,0,0,0,140,142,1,0,0,0,141,134,1,0,0,0,141,142,1,
		0,0,0,142,23,1,0,0,0,143,144,7,0,0,0,144,25,1,0,0,0,145,146,5,16,0,0,146,
		147,5,14,0,0,147,148,5,15,0,0,148,27,1,0,0,0,149,150,7,1,0,0,150,29,1,
		0,0,0,151,152,7,2,0,0,152,31,1,0,0,0,18,33,38,47,53,62,68,75,78,82,87,
		96,103,110,125,132,137,139,141
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace GrammarV1
